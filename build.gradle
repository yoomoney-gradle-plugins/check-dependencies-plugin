apply plugin: 'java-gradle-plugin'
apply plugin: 'groovy'
apply plugin: 'maven-publish'

apply from: 'http://jenkins-dev.yamoney.ru/build-scripts/backend-platform/build-git-flow.gradle'
apply from: 'http://jenkins-dev.yamoney.ru/build-scripts/backend-platform/build-test.gradle'
apply from: 'http://jenkins-dev.yamoney.ru/build-scripts/backend-platform/release/library-release.gradle'

description 'Plugin with all features for development and usage of yamoney librares.'
group 'ru.yandex.money.gradle.plugins'

repositories {
    maven { url 'http://nexus.yamoney.ru/content/repositories/central/' }
    maven { url 'http://nexus.yamoney.ru/content/repositories/releases/' }
}

buildscript {
    repositories {
        maven { url 'http://nexus.yamoney.ru/content/repositories/central/' }
        maven { url 'http://nexus.yamoney.ru/content/repositories/releases/' }

        dependencies {
            classpath 'org.ajoberstar:gradle-git:1.5.0'
            classpath 'net.researchgate:gradle-release:2.3.0'
        }
    }
}

dependencies {
    compile localGroovy(),
            'io.spring.gradle:dependency-management-plugin:0.6.1.RELEASE',
            'com.google.code.findbugs:jsr305:3.0.1'

    testCompile gradleTestKit(),
            "ru.yandex.money.common:yamoney-test-utils:5.0.4",
            'com.netflix.nebula:nebula-test:4.0.0'

    testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
        exclude module: 'groovy-all'
    }
}

jar {
    baseName "yamoney-check-dependencies-plugin"
}

ext {
    releaseRepoProxyUrl = 'http://nexus.yamoney.ru/content/repositories/releases/'
    snapshotRepoProxyUrl = 'http://nexus.yamoney.ru/content/repositories/snapshots/'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId jar.getBaseName()
        }
    }

    repositories {
        maven {
            url project.version.endsWith('-SNAPSHOT') ? project.ext.snapshotRepoProxyUrl : project.ext.releaseRepoProxyUrl
            credentials {
                def nexusUser = System.getenv('NEXUS_USER')
                if (nexusUser == "") {
                    throw new IllegalStateException("Cannot publish plugins. Nexus user name is empty.'")
                }
                def nexusPassword = System.getenv('NEXUS_PASSWORD')
                if (nexusPassword == "") {
                    throw new IllegalStateException("Cannot publish plugins. Nexus user password is empty.'")
                }
                username nexusUser
                password nexusPassword
            }
        }
    }
}